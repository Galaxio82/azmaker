<%- include('partials/header') %>

<body class="page-action">
    <div id="variable-dropdown" class="dropdown-stylish" style="display: none;">
        <input type="text" id="dropdown-search" placeholder="Rechercher une variable..." />
        <select id="category-select">
            <option value="all">Toutes les catégories</option>
        </select>
        <div id="dropdown-content">
            <div class="category" data-category="message">
                <h4>Message</h4>
                <ul>
                    <li data-variable="message_id">ID du message</li>
                    <li data-variable="message_content">Contenu</li>
                    <li data-variable="message_createdTimestamp">Horodatage</li>
                    <li data-variable="message_editedTimestamp">Timestamp modifié</li>
                    <li data-variable="message_pinned">Épinglé</li>
                    <li data-variable="message_tts">TTS activé</li>
                    <li data-variable="message_type">Type de message</li>
                    <li data-variable="message_webhookId">ID du Webhook</li>
                </ul>
            </div>
            <div class="category" data-category="author">
                <h4>Auteur</h4>
                <ul>
                    <li data-variable="author_id">ID de l'auteur</li>
                    <li data-variable="author_username">Nom d'utilisateur</li>
                    <li data-variable="author_discriminator">Discriminateur</li>
                    <li data-variable="author_bot">Est un bot</li>
                    <li data-variable="author_avatar">Avatar URL</li>
                </ul>
            </div>
            <div class="category" data-category="channel">
                <h4>Canal</h4>
                <ul>
                    <li data-variable="channel_id">ID du canal</li>
                    <li data-variable="channel_name">Nom du canal</li>
                    <li data-variable="channel_type">Type de canal</li>
                    <li data-variable="channel_nsfw">NSFW activé</li>
                </ul>
            </div>
            <div class="category" data-category="server">
                <h4>Serveur</h4>
                <ul>
                    <li data-variable="guild_id">ID du serveur</li>
                    <li data-variable="guild_name">Nom du serveur</li>
                    <li data-variable="guild_member_count">Nombre de membres</li>
                    <li data-variable="guild_owner_id">ID du propriétaire</li>
                </ul>
            </div>
            <div class="category" data-category="mention">
                <h4>Mentions</h4>
                <ul>
                    <li data-variable="mentions_users">Utilisateurs mentionnés</li>
                    <li data-variable="mentions_roles">Rôles mentionnés</li>
                    <li data-variable="mentions_channels">Canaux mentionnés</li>
                </ul>
            </div>
            <div class="category" data-category="other">
                <h4>Embeds et Pièces jointes</h4>
                <ul>
                    <li data-variable="message_embeds">Embeds inclus</li>
                    <li data-variable="message_attachments">Pièces jointes</li>
                </ul>
            </div>
            <div class="category" data-category="custom">
                <h4>Variables Customs</h4>
                <ul></ul>
            </div>
        </div>
    </div>

    <div id="command-list-section" style="display: none;">
        <h3>Liste des actions</h3>
    </div>

    <div id="event-list-section" style="display: none;">
        <h3>Liste des actions</h3>

        <div class="group" onclick="toggleActions('textActions')">
            <strong>Messages</strong>
        </div>
        <div class="actions" id="textActions">
            <button value="sendMessage" onclick="setActionDetails(this.value)">Envoyer un message</button>
            <button value="sendEmbed" onclick="setActionDetails(this.value)">Envoyer un embed</button>
            <button value="replyMessage" onclick="setActionDetails(this.value)">Répondre à un message</button>
            <button value="deleteMessage" onclick="setActionDetails(this.value)">Supprimer un message</button>
            <button value="pinMessage" onclick="setActionDetails(this.value)">Épingler un message</button>
            <button value="unpinMessage" onclick="setActionDetails(this.value)">Désépingler un message</button>
            <button value="fetchMessage" onclick="setActionDetails(this.value)">Récupérer des messages</button>
        </div>
    </div>

    <div id="form-section">
        <h3 id="action-types">Création</h3>
        <label for="action-name">Nom de l'action :</label>
        <input type="text" id="action-name" placeholder="Nom de l'action" />

        <div id="action-fields"></div>

        <button onclick="saveAction()">Enregistrer</button>
        <button onclick="cancelAction()">Annuler</button>
    </div>

    <div id="edit-mode-indicator" class="edit-mode-indicator" style="display: none;">
        <div class="edit-mode-content">
            <p id="edit-mode-text">Mode édition activé</p>
            <p id="edit-mode-description">Vous modifiez l'action <strong>"id"</strong> "<strong>name</strong>" de type
                <strong>type</strong>.
            </p>
        </div>
    </div>

    <%- include('partials/footer') %>
        <script src="public://js/modules/jquery-3.6.0.min.js"></script>
        <script src="public://js/modules/duplicate.js"></script>
        <script>
            function addScriptOnce(src) {
                return new Promise((resolve, reject) => {
                    const existingScript = $(`script[src="${src}"]`);
                    if (existingScript.length) {
                        resolve();
                    } else {
                        $.getScript(src)
                            .done(() => {
                                resolve();
                            })
                            .fail((jqxhr, settings, exception) => {
                                reject(new Error(`Erreur de chargement du script : ${src} - ${exception}`)); // Si erreur
                            });
                    }
                });
            }

            async function loadModule(moduleName) {
                try {
                    const response = await fetch(`../modules/${moduleName}/${moduleName}.html`);
                    const htmlContent = await response.text();
                    $('#command-list-section').append(htmlContent);
                    await addScriptOnce(`../modules/${moduleName}/${moduleName}.js`);
                } catch (error) {
                    console.error(`Erreur de chargement du module ${moduleName}:`, error);
                }
            }

            async function loadModules() {
                try {
                    const module = await window.api.loadComponent({ name: "modules", project: false })
                    const loadPromises = [];

                    if (module.discord) {
                        loadPromises.push(loadModule('discord'));
                    }

                    $.each(module, (moduleName, isActive) => {
                        if (isActive && moduleName !== 'discord') {
                            loadPromises.push(loadModule(moduleName));
                        }
                    });

                    await Promise.all(loadPromises);

                    await addScriptOnce('../public/js/action.js');
                } catch (error) {
                    console.error('Erreur de chargement des modules:', error);
                }
            }

            loadModules();
        </script>
</body>

</html>